#!/bin/bash

if [ "$EMAIL" = "" ]
then
  echo "Please set EMAIL"
  exit 1
fi

if [ "$#" -lt 1 ]; then
  echo "Please specify at least one branch name"
  exit 1
fi

if [ "$SLEEP_INTERVAL" = "" ]
then
  SLEEP_INTERVAL="30s"
fi

repository_name=$(basename `git rev-parse --show-toplevel`)
working_folder="/tmp/$repository_name"
mkdir -p "$working_folder"

while [ 1 ]; do
  for branch in $@
  do
    log_file="$working_folder/$branch.log"
    # -d Remove untracked directories in addition to untracked files.
    git clean -d --force
    # in case this is the first time we're seeing this branch
    # FIXME: this is going to spit out a "fatal" warning if branch already tracked
    # -t, --track When creating a new branch, set up "upstream" configuration.
    git checkout --track origin/$branch
    git checkout $branch
    git fetch origin
    git ls-remote . | grep "heads/$branch$" | awk '{print $1}' > $working_folder/$branch-heads.hash
    git ls-remote . | grep "origin/$branch$" | awk '{print $1}' > $working_folder/$branch-origin.hash
    DIFF=`diff $working_folder/$branch-heads.hash $working_folder/$branch-origin.hash`
    if [ "" != "$DIFF" ]; then
      # --hard Any changes to tracked files in the working tree discarded.
      git reset --hard origin/$branch > $log_file 2>&1
      comment=`git log --oneline -1`
      echo >> $log_file 2>&1
      (bundle install | grep -v 'Using ') > $log_file 2>&1
      echo >> $log_file 2>&1

      bundle exec rubocop -a
      rubocop_diff="$working_folder/rubocop.diff"
      git diff > $rubocop_diff
      if [ -s "$rubocop_diff" ]; then
        headline="rubocop suggests changes to $repository_name $branch $comment"
	printf '%s\n%s\n' "<pre>" "$(cat $rubocop_diff)" > $rubocop_diff
	echo "</pre>" >> $rubocop_diff
        cat $rubocop_diff | mail -a "Content-type: text/html" -s "$headline" $EMAIL
      fi
      git reset --hard origin/$branch

      echo "Top 10 rubocop offenders:" >> $log_file 2>&1
      # broken pipe workaround hack https://superuser.com/a/642932/23033
      (bundle exec rubocop --format worst | tail -n +1 | head -n 11) >> $log_file 2>/dev/null
      echo >> $log_file 2>&1
      RAILS_ENV=test bundle exec rails db:migrate --trace >> $log_file 2>&1
      if [ "$repository_name" == "ci-interface" ]; then
        # strip out files w/out errors and blank lines
        find app/javascript -name "*.coffee" -exec coffeelint {} \; | grep -v "0 errors" | grep -v " âœ“ " | sed '/^$/d' >> $log_file 2>&1
      fi
      bundle exec brakeman 2> /dev/null >> $log_file
      RAILS_ENV=test bundle exec rails assets:precompile 2>/dev/null
      bundle exec rails test --profile >> $log_file 2>&1
      # why do we do this twice? to note anything that was "dirtied" into the log
      git reset --hard >> $log_file 2>&1
      ERRORS_COUNT=`egrep '(Failure|Error):$' $log_file | wc -l`
      FINISHED_IN=`grep 'Finished in' $log_file | wc -l`
      if [ "$FINISHED_IN" -ne "1" ]; then
        ERRORS_COUNT="911"
      fi
      headline="$ERRORS_COUNT tests failed for $repository_name $branch $comment"
      cat $log_file | perl -pe 's/\x1b\[[0-9;]*[mG]//g' | mail -s "$headline" $EMAIL
      if [ "$ERRORS_COUNT" -ne "0" ]; then
        if [ -z "$SLACKBOT_URL" ]; then
          echo "Please set SLACKBOT_URL so the Slack channel can be notified."
        else
          curl -X POST --data-urlencode "payload={\"channel\": \"#dev\", \"username\": \"CI\", \"text\": \"$headline\", \"icon_emoji\": \":warning:\"}" "https://hooks.slack.com/services/$SLACKBOT_URL"
        fi
      fi
      rm log/test.log
    else
      echo NO CHANGES YET
    fi
    sleep "$SLEEP_INTERVAL"
  done
done
